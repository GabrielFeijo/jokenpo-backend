generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String?
    isGuest   Boolean  @default(true)
    socketId  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdRooms  Room[]   @relation("RoomCreator")
    playerRooms   Room[]   @relation("RoomPlayers", fields: [playerRoomIds], references: [id])
    playerRoomIds String[] @db.ObjectId
    plays         Play[]
    wonMatches    Match[]  @relation("MatchWinner")
    lostMatches   Match[]  @relation("MatchLoser")

    @@map("users")
}

model Room {
    id         String     @id @default(auto()) @map("_id") @db.ObjectId
    inviteCode String     @unique
    createdBy  String     @db.ObjectId
    gameMode   GameMode   @default(CLASSIC)
    status     RoomStatus @default(WAITING)
    maxPlayers Int        @default(2)
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt

    creator   User     @relation("RoomCreator", fields: [createdBy], references: [id])
    players   User[]   @relation("RoomPlayers", fields: [playerIds], references: [id])
    playerIds String[] @db.ObjectId
    matches   Match[]

    @@map("rooms")
}

model Match {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    roomId       String      @db.ObjectId
    gameMode     GameMode    @default(CLASSIC)
    status       MatchStatus @default(WAITING)
    winnerId     String?     @db.ObjectId
    loserId      String?     @db.ObjectId
    isDraw       Boolean     @default(false)
    player1Score Int         @default(0)
    player2Score Int         @default(0)
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    finishedAt   DateTime?

    room    Room     @relation(fields: [roomId], references: [id])
    winner  User?    @relation("MatchWinner", fields: [winnerId], references: [id])
    loser   User?    @relation("MatchLoser", fields: [loserId], references: [id])
    plays   Play[]
    results Result[]

    @@map("matches")
}

model Play {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    matchId     String   @db.ObjectId
    playerId    String   @db.ObjectId
    choice      Choice
    timestamp   DateTime @default(now())
    roundNumber Int      @default(1)

    match  Match @relation(fields: [matchId], references: [id])
    player User  @relation(fields: [playerId], references: [id])

    @@map("plays")
}

model Result {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    matchId       String   @db.ObjectId
    winnerId      String?  @db.ObjectId
    loserId       String?  @db.ObjectId
    isDraw        Boolean  @default(false)
    player1Choice Choice
    player2Choice Choice
    player1Score  Int      @default(0)
    player2Score  Int      @default(0)
    roundNumber   Int      @default(1)
    createdAt     DateTime @default(now())

    match Match @relation(fields: [matchId], references: [id])

    @@map("results")
}

enum GameMode {
    CLASSIC // rock, paper, scissors
    EXTENDED // rock, paper, scissors, lizard, spock
}

enum RoomStatus {
    WAITING
    READY
    PLAYING
    FINISHED
}

enum MatchStatus {
    WAITING
    PLAYING
    FINISHED
}

enum Choice {
    ROCK
    PAPER
    SCISSORS
    LIZARD
    SPOCK
}
